//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Solara"",
            ""id"": ""9d7db58d-ea49-4b00-8722-a6edd6cbab07"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""4ca64889-237f-4662-970d-10309e3edde3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""08efbc8f-b5ac-4645-86db-1f35490ead04"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""0649d74e-f6a8-4b8a-9113-6b5a42f03296"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""8edf005d-8508-4fd0-9257-e26d8caea2c8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ab4761b2-4437-45a6-b9e6-18054ffc801e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""00fae7c2-ce57-46b0-ad42-4621f179cd04"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""918a6127-13e2-4e74-b849-c1de380ca609"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d6708d10-e6f6-4a2e-920e-5df75d3ecb48"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0ef74c7f-e5e4-4380-beb1-14a01d322ac2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0994cd67-45d8-431d-9414-a79e43975bd4"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Bob"",
            ""id"": ""20497e9d-f7f9-422e-a0b9-65aa2bf2dd7c"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""9e2dc09a-11e4-4ee0-8cd0-df932bd2564f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""923890f2-60d9-4588-8ac9-43a975bc4417"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Solara
        m_Solara = asset.FindActionMap("Solara", throwIfNotFound: true);
        m_Solara_Movement = m_Solara.FindAction("Movement", throwIfNotFound: true);
        m_Solara_Jump = m_Solara.FindAction("Jump", throwIfNotFound: true);
        m_Solara_Look = m_Solara.FindAction("Look", throwIfNotFound: true);
        // Bob
        m_Bob = asset.FindActionMap("Bob", throwIfNotFound: true);
        m_Bob_Newaction = m_Bob.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Solara
    private readonly InputActionMap m_Solara;
    private List<ISolaraActions> m_SolaraActionsCallbackInterfaces = new List<ISolaraActions>();
    private readonly InputAction m_Solara_Movement;
    private readonly InputAction m_Solara_Jump;
    private readonly InputAction m_Solara_Look;
    public struct SolaraActions
    {
        private @PlayerInput m_Wrapper;
        public SolaraActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Solara_Movement;
        public InputAction @Jump => m_Wrapper.m_Solara_Jump;
        public InputAction @Look => m_Wrapper.m_Solara_Look;
        public InputActionMap Get() { return m_Wrapper.m_Solara; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SolaraActions set) { return set.Get(); }
        public void AddCallbacks(ISolaraActions instance)
        {
            if (instance == null || m_Wrapper.m_SolaraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SolaraActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(ISolaraActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(ISolaraActions instance)
        {
            if (m_Wrapper.m_SolaraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISolaraActions instance)
        {
            foreach (var item in m_Wrapper.m_SolaraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SolaraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SolaraActions @Solara => new SolaraActions(this);

    // Bob
    private readonly InputActionMap m_Bob;
    private List<IBobActions> m_BobActionsCallbackInterfaces = new List<IBobActions>();
    private readonly InputAction m_Bob_Newaction;
    public struct BobActions
    {
        private @PlayerInput m_Wrapper;
        public BobActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Bob_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Bob; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BobActions set) { return set.Get(); }
        public void AddCallbacks(IBobActions instance)
        {
            if (instance == null || m_Wrapper.m_BobActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BobActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IBobActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IBobActions instance)
        {
            if (m_Wrapper.m_BobActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBobActions instance)
        {
            foreach (var item in m_Wrapper.m_BobActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BobActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BobActions @Bob => new BobActions(this);
    public interface ISolaraActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IBobActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
